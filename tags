!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS_MT_SLOT	src/tmInput.c	22;"	d	file:
ACORN8x8_IDX	test/font.h	30;"	d
AP_CONF	include/tmMapping.h	21;"	d
AT_CONF	include/tmMapping.h	26;"	d
BUF_EVT_NUM	src/tmInput.c	17;"	d	file:
BUF_SIZE	include/tmMapping.h	29;"	d
BUTTON_ACTIVE	test/ts_test.c	38;"	d	file:
CAL_CONF	include/tmMapping.h	23;"	d
CAL_MATRIX_COL	include/tmMapping.h	34;"	d
CAL_MATRIX_ROW	include/tmMapping.h	33;"	d
FB_CONF	include/tmMapping.h	25;"	d
FB_LEN_X	include/tmMapping.h	40;"	d
FB_LEN_Y	include/tmMapping.h	41;"	d
FONTDATAMAX	test/font_8x8.c	9;"	d	file:
HAVE_ALLOCA_H	test/config.h	17;"	d
HAVE_ALLOCA	test/config.h	13;"	d
HAVE_BZERO	test/config.h	20;"	d
HAVE_DLFCN_H	test/config.h	23;"	d
HAVE_FCNTL_H	test/config.h	29;"	d
HAVE_GETPAGESIZE	test/config.h	32;"	d
HAVE_GETTIMEOFDAY	test/config.h	35;"	d
HAVE_INTTYPES_H	test/config.h	38;"	d
HAVE_LIBDL	test/config.h	41;"	d
HAVE_LIMITS_H	test/config.h	44;"	d
HAVE_MALLOC	test/config.h	48;"	d
HAVE_MEMMOVE	test/config.h	51;"	d
HAVE_MEMORY_H	test/config.h	54;"	d
HAVE_MEMSET	test/config.h	57;"	d
HAVE_MUNMAP	test/config.h	63;"	d
HAVE_SELECT	test/config.h	66;"	d
HAVE_STAT_EMPTY_STRING_BUG	test/config.h	70;"	d
HAVE_STDINT_H	test/config.h	73;"	d
HAVE_STDLIB_H	test/config.h	76;"	d
HAVE_STRCASECMP	test/config.h	79;"	d
HAVE_STRCHR	test/config.h	82;"	d
HAVE_STRDUP	test/config.h	85;"	d
HAVE_STRINGS_H	test/config.h	88;"	d
HAVE_STRING_H	test/config.h	91;"	d
HAVE_STRTOUL	test/config.h	94;"	d
HAVE_SYS_IOCTL_H	test/config.h	97;"	d
HAVE_SYS_SELECT_H	test/config.h	100;"	d
HAVE_SYS_SOCKET_H	test/config.h	103;"	d
HAVE_SYS_STAT_H	test/config.h	106;"	d
HAVE_SYS_TIME_H	test/config.h	109;"	d
HAVE_SYS_TYPES_H	test/config.h	112;"	d
HAVE_UNISTD_H	test/config.h	115;"	d
HAVE_VPRINTF	test/config.h	118;"	d
IPC_CLR_MAP_LEN	include/tmIpc.h	16;"	d
IPC_CMD_CLR_MAP	include/tmIpc.h	13;"	d
IPC_CMD_SET_MAP	include/tmIpc.h	12;"	d
IPC_DBG	src/tmIpc.c	14;"	d	file:
IPC_ENABLE	src/tmIpc.c	13;"	d	file:
IPC_NAME	src/tmIpc.c	12;"	d	file:
IPC_RETRY	src/tmIpc.c	15;"	d	file:
IPC_SET_MAP_LEN	include/tmIpc.h	15;"	d
JITTER_BOUNDARY	include/tmMapping.h	36;"	d
LIST_POISON1	include/qUtils.h	112;"	d
LIST_POISON2	include/qUtils.h	113;"	d
LONG_BITS	include/tmInput.h	15;"	d
MAX_FONT_NAME	test/font.h	36;"	d
MAX_QUEUE	include/tmMapping.h	31;"	d
MT_CONF	include/tmMapping.h	27;"	d
MULTIPLE	include/tmMapping.h	30;"	d
NR_BUTTONS	test/ts_test.c	48;"	d	file:
NR_COLORS	test/ts_test.c	32;"	d	file:
NUM_LONGS	include/tmInput.h	16;"	d
PACKAGE_BUGREPORT	test/config.h	128;"	d
PACKAGE_NAME	test/config.h	131;"	d
PACKAGE_STRING	test/config.h	134;"	d
PACKAGE_TARNAME	test/config.h	137;"	d
PACKAGE_VERSION	test/config.h	140;"	d
PACKAGE	test/config.h	125;"	d
PEARL8x8_IDX	test/font.h	26;"	d
PNL_CONF	include/tmMapping.h	22;"	d
QSI_TM_CONF	include/tmMapping.h	20;"	d
QUTILS_H_	include/qUtils.h	9;"	d
Q_ABS	include/qUtils.h	98;"	d
Q_ALL	include/qUtils.h	17;"	d
Q_ATOMIC_INIT	include/qUtils.h	199;"	d
Q_ATOMIC_PTR_INIT	include/qUtils.h	200;"	d
Q_BIT_AND	include/qUtils.h	102;"	d
Q_BIT_CLR	include/qUtils.h	101;"	d
Q_BIT_SET	include/qUtils.h	100;"	d
Q_BIT_VAL	include/qUtils.h	103;"	d
Q_DBG_CONF	include/qUtils.h	27;"	d
Q_DBG_DISABLE	include/qUtils.h	22;"	d
Q_DBG_ENABLE	include/qUtils.h	23;"	d
Q_DBG_MAP	include/qUtils.h	26;"	d
Q_DBG_POINT	include/qUtils.h	25;"	d
Q_DBG	include/qUtils.h	18;"	d
Q_ELEMENTS	include/qUtils.h	106;"	d
Q_ERR	include/qUtils.h	20;"	d
Q_GET_BITS	include/qUtils.h	104;"	d
Q_INFO	include/qUtils.h	19;"	d
Q_LIKELY	include/qUtils.h	40;"	d
Q_LIKELY	include/qUtils.h	44;"	d
Q_MAX_ALLOC_SIZE	include/qUtils.h	37;"	d
Q_MAX	include/qUtils.h	81;"	d
Q_MAX	include/qUtils.h	94;"	d
Q_MIN	include/qUtils.h	87;"	d
Q_MIN	include/qUtils.h	95;"	d
Q_PRETTY_FUNCTION	include/qUtils.h	42;"	d
Q_PRETTY_FUNCTION	include/qUtils.h	46;"	d
Q_UNLIKELY	include/qUtils.h	41;"	d
Q_UNLIKELY	include/qUtils.h	45;"	d
RETSIGTYPE	test/config.h	143;"	d
SELECT_SEC	src/tmInput.c	18;"	d	file:
SELECT_TYPE_ARG1	test/config.h	146;"	d
SELECT_TYPE_ARG234	test/config.h	149;"	d
SELECT_TYPE_ARG5	test/config.h	152;"	d
SELECT_USEC	src/tmInput.c	19;"	d	file:
SIZE_CONF	include/tmMapping.h	24;"	d
SLOT_NUM	src/tmInput.c	25;"	d	file:
STDC_HEADERS	test/config.h	163;"	d
SUN12x22_IDX	test/font.h	29;"	d
SUN8x16_IDX	test/font.h	28;"	d
TIME_WITH_SYS_TIME	test/config.h	166;"	d
TMERROR_H_	include/tmError.h	9;"	d
TMINPUT_H_	include/tmInput.h	9;"	d
TMMAPPING_H_	include/tmMapping.h	9;"	d
TM_AP_MAX	include/tm.h	/^    TM_AP_MAX,$/;"	e	enum:_tm_ap
TM_AP_MONITOR	include/tm.h	/^    TM_AP_MONITOR,$/;"	e	enum:_tm_ap
TM_AP_NAVI	include/tm.h	/^    TM_AP_NAVI,$/;"	e	enum:_tm_ap
TM_AP_NONE	include/tm.h	/^    TM_AP_NONE = -1$/;"	e	enum:_tm_ap
TM_AP_NUM	include/tm.h	/^    TM_AP_NUM = TM_AP_MAX,$/;"	e	enum:_tm_ap
TM_AP_QSI_L	include/tm.h	/^    TM_AP_QSI_L,$/;"	e	enum:_tm_ap
TM_AP_QSI_R	include/tm.h	/^    TM_AP_QSI_R,$/;"	e	enum:_tm_ap
TM_AP_QSI	include/tm.h	/^    TM_AP_QSI,$/;"	e	enum:_tm_ap
TM_ERRNO_ALLOC	include/tmError.h	/^    TM_ERRNO_ALLOC      = -5,       \/\/ Allocate error$/;"	e	enum:_tm_errno
TM_ERRNO_DEV_NUM	include/tmError.h	/^    TM_ERRNO_DEV_NUM    = -4,       \/\/ Bad device number$/;"	e	enum:_tm_errno
TM_ERRNO_DEV_PARAM	include/tmError.h	/^    TM_ERRNO_DEV_PARAM  = -2,       \/\/ Parameter of device error$/;"	e	enum:_tm_errno
TM_ERRNO_NO_CONF	include/tmError.h	/^    TM_ERRNO_NO_CONF    = -10,      \/\/ No configuration$/;"	e	enum:_tm_errno
TM_ERRNO_NO_DEV	include/tmError.h	/^    TM_ERRNO_NO_DEV     = -1,       \/\/ No such device or device doesn't initialize$/;"	e	enum:_tm_errno
TM_ERRNO_NO_FD	include/tmError.h	/^    TM_ERRNO_NO_FD      = -11       \/\/ Event doesn't opened$/;"	e	enum:_tm_errno
TM_ERRNO_OPEN	include/tmError.h	/^    TM_ERRNO_OPEN       = -6,       \/\/ Open file error$/;"	e	enum:_tm_errno
TM_ERRNO_PARAM	include/tmError.h	/^    TM_ERRNO_PARAM      = -8,       \/\/ Function parameter error$/;"	e	enum:_tm_errno
TM_ERRNO_POINT	include/tmError.h	/^    TM_ERRNO_POINT      = -7,       \/\/ Points are out of rage$/;"	e	enum:_tm_errno
TM_ERRNO_SUCCESS	include/tmError.h	/^    TM_ERRNO_SUCCESS    =  0,       \/\/ No error$/;"	e	enum:_tm_errno
TM_ERRNO_SWAP	include/tmError.h	/^    TM_ERRNO_SWAP       = -9,       \/\/ Need to swap x,y$/;"	e	enum:_tm_errno
TM_EVENT_TYPE_SOURCE	include/tmMapping.h	/^    TM_EVENT_TYPE_SOURCE,$/;"	e	enum:_tm_event_type
TM_EVENT_TYPE_TARGET	include/tmMapping.h	/^    TM_EVENT_TYPE_TARGET$/;"	e	enum:_tm_event_type
TM_FB_1000_600_0_0_0	include/tm.h	/^    TM_FB_1000_600_0_0_0,$/;"	e	enum:_tm_fb
TM_FB_800_480_0_0_0	include/tm.h	/^    TM_FB_800_480_0_0_0,$/;"	e	enum:_tm_fb
TM_FB_MAX	include/tm.h	/^    TM_FB_MAX,$/;"	e	enum:_tm_fb
TM_FB_NONE	include/tm.h	/^    TM_FB_NONE = -1$/;"	e	enum:_tm_fb
TM_FB_NUM	include/tm.h	/^    TM_FB_NUM = TM_FB_MAX,$/;"	e	enum:_tm_fb
TM_H_	include/tm.h	9;"	d
TM_INPUT_STATUS_DRAG	include/tmInput.h	/^    TM_INPUT_STATUS_DRAG,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_IDLE	include/tmInput.h	/^    TM_INPUT_STATUS_IDLE,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_MT_A_SYNC	include/tmInput.h	/^    TM_INPUT_STATUS_MT_A_SYNC,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_MT_B_TRANS	include/tmInput.h	/^    TM_INPUT_STATUS_MT_B_TRANS,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_MT_IDLE	include/tmInput.h	/^    TM_INPUT_STATUS_MT_IDLE,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_MT_RELEASE	include/tmInput.h	/^    TM_INPUT_STATUS_MT_RELEASE,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_MT_TOUCH	include/tmInput.h	/^    TM_INPUT_STATUS_MT_TOUCH,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_NONE	include/tmInput.h	/^    TM_INPUT_STATUS_NONE = -1$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_PRESS	include/tmInput.h	/^    TM_INPUT_STATUS_PRESS,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_RELEASE	include/tmInput.h	/^    TM_INPUT_STATUS_RELEASE,$/;"	e	enum:_tm_input_status
TM_INPUT_STATUS_TOUCH	include/tmInput.h	/^    TM_INPUT_STATUS_TOUCH,$/;"	e	enum:_tm_input_status
TM_INPUT_TYPE_MT_A	include/tmInput.h	/^    TM_INPUT_TYPE_SINGLE, TM_INPUT_TYPE_MT_A, TM_INPUT_TYPE_MT_B,$/;"	e	enum:_tm_input_type
TM_INPUT_TYPE_MT_B	include/tmInput.h	/^    TM_INPUT_TYPE_SINGLE, TM_INPUT_TYPE_MT_A, TM_INPUT_TYPE_MT_B,$/;"	e	enum:_tm_input_type
TM_INPUT_TYPE_NONE	include/tmInput.h	/^    TM_INPUT_TYPE_NONE = -1$/;"	e	enum:_tm_input_type
TM_INPUT_TYPE_SINGLE	include/tmInput.h	/^    TM_INPUT_TYPE_SINGLE, TM_INPUT_TYPE_MT_A, TM_INPUT_TYPE_MT_B,$/;"	e	enum:_tm_input_type
TM_MAIN_DELAY	src/main.c	17;"	d	file:
TM_OP_EVENT_END	include/tmMapping.h	/^    TM_OP_EVENT_END$/;"	e	enum:_tm_op_event
TM_OP_EVENT_MT_END	include/tmMapping.h	/^    TM_OP_EVENT_MT_END,$/;"	e	enum:_tm_op_event
TM_OP_EVENT_NONE	include/tmMapping.h	/^    TM_OP_EVENT_NONE,$/;"	e	enum:_tm_op_event
TM_OP_EVENT_START	include/tmMapping.h	/^    TM_OP_EVENT_START,$/;"	e	enum:_tm_op_event
TM_OP_EVENT_TRANS_X	include/tmMapping.h	/^    TM_OP_EVENT_TRANS_X,$/;"	e	enum:_tm_op_event
TM_OP_EVENT_TRANS_Y	include/tmMapping.h	/^    TM_OP_EVENT_TRANS_Y,$/;"	e	enum:_tm_op_event
TM_PANEL_FRONT	include/tm.h	/^    TM_PANEL_FRONT,$/;"	e	enum:_tm_panel
TM_PANEL_LEFT	include/tm.h	/^    TM_PANEL_LEFT,$/;"	e	enum:_tm_panel
TM_PANEL_MAX	include/tm.h	/^    TM_PANEL_MAX,$/;"	e	enum:_tm_panel
TM_PANEL_NONE	include/tm.h	/^    TM_PANEL_NONE = -1$/;"	e	enum:_tm_panel
TM_PANEL_NUM	include/tm.h	/^    TM_PANEL_NUM = TM_PANEL_MAX,$/;"	e	enum:_tm_panel
TM_PANEL_RIGHT	include/tm.h	/^    TM_PANEL_RIGHT,$/;"	e	enum:_tm_panel
TM_STATUS_DEINIT	include/tm.h	/^    TM_STATUS_DEINIT,$/;"	e	enum:_tm_status
TM_STATUS_ERROR	include/tm.h	/^    TM_STATUS_ERROR,$/;"	e	enum:_tm_status
TM_STATUS_EXIT	include/tm.h	/^    TM_STATUS_EXIT$/;"	e	enum:_tm_status
TM_STATUS_INIT	include/tm.h	/^    TM_STATUS_INIT,$/;"	e	enum:_tm_status
TM_STATUS_IPC_INIT	include/tm.h	/^    TM_STATUS_IPC_INIT,$/;"	e	enum:_tm_status
TM_STATUS_NONE	include/tm.h	/^    TM_STATUS_NONE,$/;"	e	enum:_tm_status
TM_STATUS_REINIT	include/tm.h	/^	TM_STATUS_REINIT,$/;"	e	enum:_tm_status
TM_STATUS_RUNNING	include/tm.h	/^    TM_STATUS_RUNNING,$/;"	e	enum:_tm_status
TM_VERSION	include/tm.h	17;"	d
TSAPI	test/tslib.h	36;"	d
TSAPI	test/tslib.h	38;"	d
TSEXPORT	test/tslib.h	22;"	d
TSEXPORT	test/tslib.h	27;"	d
TSEXPORT	test/tslib.h	30;"	d
TSIMPORT	test/tslib.h	21;"	d
TSIMPORT	test/tslib.h	25;"	d
TSLOCAL	test/tslib.h	23;"	d
TSLOCAL	test/tslib.h	28;"	d
TSLOCAL	test/tslib.h	31;"	d
VERSION	test/config.h	169;"	d
VGA6x11_IDX	test/font.h	27;"	d
VGA8x16_IDX	test/font.h	25;"	d
VGA8x8_IDX	test/font.h	24;"	d
XORMODE	test/fbutils.h	22;"	d
_FBUTILS_H	test/fbutils.h	14;"	d
_TMIPC_H	include/tmIpc.h	9;"	d
_TM_TEST_H	test/tm_test.h	2;"	d
_TSLIB_H_	test/tslib.h	2;"	d
_VIDEO_FONT_H	test/font.h	12;"	d
__q_list_add	include/qUtils.h	/^static inline void __q_list_add(list_head_t *_new, list_head_t *prev, list_head_t *next)$/;"	f
__q_list_del	include/qUtils.h	/^static inline void __q_list_del(list_head_t *prev, list_head_t *next)$/;"	f
__setpixel	test/fbutils.c	/^static inline void __setpixel (union multiptr loc, unsigned xormode, unsigned color)$/;"	f	file:
__tm_list_add	include/tm.h	23;"	d
_cmd_append_t	test/tm_test.c	/^typedef struct _cmd_append_t {$/;"	s	file:
_cmd_clear_t	test/tm_test.c	/^typedef struct _cmd_clear_t {$/;"	s	file:
_evt_data_t	test/tm_test.c	/^typedef struct _evt_data_t {$/;"	s	file:
_fb_data_t	test/tm_test.c	/^typedef struct _fb_data_t {$/;"	s	file:
_list_head	include/qUtils.h	/^struct _list_head{$/;"	s
_thread_data_t	test/tm_test.h	/^typedef struct _thread_data_t {$/;"	s
_tm_ap_info	include/tm.h	/^struct _tm_ap_info$/;"	s
_tm_ap	include/tm.h	/^enum _tm_ap{$/;"	g
_tm_calibrate	include/tmMapping.h	/^struct _tm_calibrate$/;"	s
_tm_cmd_t	test/tm_test.c	/^typedef struct _tm_cmd_t {$/;"	s	file:
_tm_config	include/tmMapping.h	/^struct _tm_config$/;"	s
_tm_display	include/tm.h	/^struct _tm_display$/;"	s
_tm_errno	include/tmError.h	/^enum _tm_errno{$/;"	g
_tm_event_type	include/tmMapping.h	/^enum _tm_event_type{$/;"	g
_tm_fb_param	include/tmMapping.h	/^struct _tm_fb_param \/\/ relative proportion to native size$/;"	s
_tm_fb	include/tm.h	/^enum _tm_fb{$/;"	g
_tm_handler	src/tmMapping.c	/^typedef struct _tm_handler$/;"	s	file:
_tm_info	src/tm.c	/^typedef struct _tm_info$/;"	s	file:
_tm_input_coord	src/tmInput.c	/^typedef struct _tm_input_coord{$/;"	s	file:
_tm_input_dev	src/tmInput.c	/^typedef struct _tm_input_dev {$/;"	s	file:
_tm_input_queue	src/tmInput.c	/^typedef struct _tm_input_queue{$/;"	s	file:
_tm_input_status	include/tmInput.h	/^enum _tm_input_status$/;"	g
_tm_input_type	include/tmInput.h	/^enum _tm_input_type$/;"	g
_tm_input	src/tmInput.c	/^typedef struct _tm_input{$/;"	s	file:
_tm_ipc_data	src/tmIpc.c	/^typedef struct _tm_ipc_data{$/;"	s	file:
_tm_native_size_param	include/tmMapping.h	/^struct _tm_native_size_param$/;"	s
_tm_op_event	include/tmMapping.h	/^enum _tm_op_event{$/;"	g
_tm_panel_info	include/tm.h	/^struct _tm_panel_info$/;"	s
_tm_panel	include/tm.h	/^enum _tm_panel{$/;"	g
_tm_remove_display_conf	src/tm.c	/^void _tm_remove_display_conf(tm_panel_info_t* panel)$/;"	f
_tm_status	include/tm.h	/^enum _tm_status{$/;"	g
_tm_trans_matrix	include/tmMapping.h	/^struct _tm_trans_matrix$/;"	s
abs_end_x	include/tmMapping.h	/^    int abs_end_x;$/;"	m	struct:_tm_fb_param
abs_end_y	include/tmMapping.h	/^    int abs_end_y;$/;"	m	struct:_tm_fb_param
abs_st_x	include/tmMapping.h	/^    int abs_st_x;$/;"	m	struct:_tm_fb_param
abs_st_y	include/tmMapping.h	/^    int abs_st_y;$/;"	m	struct:_tm_fb_param
act_ap	src/tmInput.c	/^    tm_ap_info_t**    act_ap;$/;"	m	struct:_tm_input_dev	file:
a	qsi_cal.c	/^	int a[7];$/;"	m	struct:__anon4	file:
ap_head	src/tm.c	/^    list_head_t       	ap_head;$/;"	m	struct:_tm_info	file:
ap_high	test/tm_test.c	/^    char ap_high;$/;"	m	struct:_cmd_append_t	file:
ap_num	src/tmInput.c	/^    uint8_t             ap_num;$/;"	m	struct:_tm_input	file:
ap_start_pos_x	test/tm_test.c	/^    char ap_start_pos_x;$/;"	m	struct:_cmd_append_t	file:
ap_start_pos_y	test/tm_test.c	/^    char ap_start_pos_y;$/;"	m	struct:_cmd_append_t	file:
ap_width	test/tm_test.c	/^    char ap_width;$/;"	m	struct:_cmd_append_t	file:
ap	include/tm.h	/^    tm_ap_info_t*   ap;$/;"	m	struct:_tm_display
ap	src/tmInput.c	/^    tm_ap_info_t*       ap;$/;"	m	struct:_tm_input_queue	file:
ap	test/tm_test.c	/^    char ap;$/;"	m	struct:_cmd_append_t	file:
ap	test/tm_test.h	/^    int ap;$/;"	m	struct:_thread_data_t
append	test/tm_test.c	/^        cmd_append_t    append;$/;"	m	union:_tm_cmd_t::__anon5	file:
buf	include/qUtils.h	/^  char *buf;$/;"	m	struct:q_queue
button_draw	test/ts_test.c	/^static void button_draw (struct ts_button *button)$/;"	f	file:
button_handle	test/ts_test.c	/^static int button_handle (struct ts_button *button, struct ts_sample *samp)$/;"	f	file:
button_palette	test/ts_test.c	/^static int button_palette [6] =$/;"	v	file:
buttons	test/ts_test.c	/^static struct ts_button buttons [NR_BUTTONS];$/;"	v	typeref:struct:ts_button	file:
bytes_per_pixel	test/fbutils.c	/^static int bytes_per_pixel;$/;"	v	file:
cal_param	include/tm.h	/^    tm_calibrate_t* cal_param;$/;"	m	struct:_tm_panel_info
calibrate_head	include/tmMapping.h	/^    list_head_t             calibrate_head;$/;"	m	struct:_tm_config
calibrate_head	src/tmMapping.c	/^    list_head_t	    calibrate_head;$/;"	m	struct:_tm_handler	file:
calibrate_num	include/tmMapping.h	/^    uint8_t                 calibrate_num;$/;"	m	struct:_tm_config
calibration	qsi_cal.c	/^} calibration;$/;"	t	typeref:struct:__anon4	file:
clear	test/tm_test.c	/^        cmd_clear_t     clear;$/;"	m	union:_tm_cmd_t::__anon5	file:
close_framebuffer	test/fbutils.c	/^void close_framebuffer(thread_data_t* data)$/;"	f
cmd_append_t	test/tm_test.c	/^} cmd_append_t;$/;"	t	typeref:struct:_cmd_append_t	file:
cmd_clear_t	test/tm_test.c	/^} cmd_clear_t;$/;"	t	typeref:struct:_cmd_clear_t	file:
colormap	test/fbutils.c	/^static unsigned colormap [256];$/;"	v	file:
con_fd	test/tm_test.h	/^    int con_fd;$/;"	m	struct:_thread_data_t
con_fd	test/fbutils.c	/^static int con_fd, fb_fd, last_vt = -1;$/;"	v	file:
cond	include/qUtils.h	/^    pthread_cond_t cond;$/;"	m	struct:q_cond
conf	src/tmMapping.c	/^    tm_config_t     conf;$/;"	m	struct:_tm_handler	file:
consoledevice	test/fbutils.c	/^static char *consoledevice = NULL;$/;"	v	file:
cur	src/tmInput.c	/^    tm_input_coord_t    cur;$/;"	m	struct:_tm_input_queue	file:
data	test/font.h	/^    char *data;$/;"	m	struct:fbcon_font_desc
data	test/tm_test.c	/^        char            data[16];$/;"	m	union:_tm_cmd_t::__anon5	file:
dbg_level	include/qUtils.h	29;"	d
debug	src/tmIpc.c	/^        char debug;$/;"	m	struct:_tm_ipc_data	file:
debug	test/tm_test.c	/^        char debug;$/;"	m	struct:ipc_data	file:
defaultconsoledevice	test/fbutils.c	/^static char *defaultconsoledevice = "\/dev\/tty";$/;"	v	file:
defaultfbdevice	test/fbutils.c	/^static char *defaultfbdevice = "\/dev\/fb0";$/;"	v	file:
dejitter_boundary	include/tmMapping.h	38;"	d
dev_head	src/tmInput.c	/^    list_head_t         dev_head;$/;"	m	struct:_tm_input	file:
dev_num	src/tmInput.c	/^    uint8_t             dev_num;$/;"	m	struct:_tm_input	file:
dev	test/tm_test.c	/^    char* dev;$/;"	m	struct:_evt_data_t	file:
dev	test/tm_test.c	/^    char* dev;$/;"	m	struct:_fb_data_t	file:
dis_conf	src/tm.c	/^    tm_display_t*       dis_conf;$/;"	m	struct:_tm_info	file:
display_head	include/tm.h	/^    list_head_t     display_head;$/;"	m	struct:_tm_panel_info
div	include/tmMapping.h	/^        int div;$/;"	m	struct:_tm_calibrate::__anon3
d	test/tm_test.c	/^thread_data_t d[3];$/;"	v
element	include/tmMapping.h	/^    int element[CAL_MATRIX_ROW][CAL_MATRIX_COL];$/;"	m	struct:_tm_trans_matrix
event_fd	test/tm_test.h	/^    int event_fd;$/;"	m	struct:_thread_data_t
event	test/tm_test.h	/^    char* event;$/;"	m	struct:_thread_data_t
evfds	src/tmInput.c	/^    fd_set            evfds;$/;"	m	struct:_tm_input_dev	file:
evt_data_t	test/tm_test.c	/^} evt_data_t;$/;"	t	typeref:struct:_evt_data_t	file:
evt_data	test/tm_test.c	/^evt_data_t evt_data[]={$/;"	v
evt_num	src/tmInput.c	/^    int                 evt_num;$/;"	m	struct:_tm_input_queue	file:
evt_path	include/tm.h	/^    const char*             evt_path;$/;"	m	struct:_tm_ap_info
evt_path	include/tm.h	/^    const char*     evt_path;$/;"	m	struct:_tm_panel_info
evt	src/tmInput.c	/^    tm_input_event_t    evt[BUF_EVT_NUM];$/;"	m	struct:_tm_input_queue	file:
fb_data_t	test/tm_test.c	/^} fb_data_t;$/;"	t	typeref:struct:_fb_data_t	file:
fb_data	test/tm_test.c	/^fb_data_t fb_data[]={$/;"	v
fb_fd	test/tm_test.h	/^    int fb_fd;$/;"	m	struct:_thread_data_t
fb_fd	test/fbutils.c	/^static int con_fd, fb_fd, last_vt = -1;$/;"	v	file:
fb_fd	test/fbutils.c	/^static int fb_fd=0;$/;"	v	file:
fbcon_font_desc	test/font.h	/^struct fbcon_font_desc {$/;"	s
fb	test/tm_test.h	/^    char* fb;$/;"	m	struct:_thread_data_t
fbuffer	test/fbutils.c	/^static unsigned char *fbuffer;$/;"	v	file:
fd	include/tm.h	/^    int             fd;$/;"	m	struct:_tm_panel_info
fd	include/tm.h	/^    volatile int            fd;$/;"	m	struct:_tm_ap_info
fillrect	test/fbutils.c	/^void fillrect (int x1, int y1, int x2, int y2, unsigned colidx)$/;"	f
fix	test/fbutils.c	/^static struct fb_fix_screeninfo fix;$/;"	v	typeref:struct:fb_fix_screeninfo	file:
flags	test/ts_test.c	/^	int flags;$/;"	m	struct:ts_button	file:
font_vga_8x8	test/font_8x8.c	/^struct fbcon_font_desc font_vga_8x8 = {$/;"	v	typeref:struct:fbcon_font_desc
fontdata_8x8	test/font_8x8.c	/^static unsigned char fontdata_8x8[FONTDATAMAX] = {$/;"	v	file:
from	include/tm.h	/^    tm_fb_param_t   from;$/;"	m	struct:_tm_display
front	include/qUtils.h	/^  int front;$/;"	m	struct:q_queue
g_client	src/tmIpc.c	/^tm_ipc_data_t g_client;$/;"	v
g_daemonise	src/main.c	/^q_bool g_daemonise = q_false;$/;"	v
g_ipc	test/tm_test.c	/^}g_ipc;$/;"	v	typeref:struct:ipc_data
g_status	src/main.c	/^tm_status_t g_status = TM_STATUS_NONE;$/;"	v
hdr	test/tm_test.c	/^    char hdr;$/;"	m	struct:_cmd_append_t	file:
hdr	test/tm_test.c	/^    char hdr;$/;"	m	struct:_cmd_clear_t	file:
head_cal	include/tmMapping.h	/^    tm_calibrate_t          head_cal;$/;"	m	struct:_tm_config
head_size	include/tmMapping.h	/^    tm_native_size_param_t  head_size;$/;"	m	struct:_tm_config
height	test/font.h	/^    int width, height;$/;"	m	struct:fbcon_font_desc
h	include/tmMapping.h	/^    int h;$/;"	m	struct:_tm_fb_param
h	test/ts_test.c	/^	int x, y, w, h;$/;"	m	struct:ts_button	file:
horizontal	include/tmMapping.h	/^    char horizontal;$/;"	m	struct:_tm_fb_param
id	include/qUtils.h	/^    pthread_t id;$/;"	m	struct:q_thread
id	include/tm.h	/^        int                 id;$/;"	m	union:_tm_ap_info::__anon1
id	include/tm.h	/^        int         id;$/;"	m	union:_tm_panel_info::__anon2
id	include/tmMapping.h	/^    int                 id;$/;"	m	struct:_tm_calibrate
id	include/tmMapping.h	/^    int     id;$/;"	m	struct:_tm_native_size_param
id	test/tm_test.h	/^    pthread_t id;$/;"	m	struct:_thread_data_t
idx_x	src/tmInput.c	/^    int                 idx_x;$/;"	m	struct:_tm_input_queue	file:
idx_y	src/tmInput.c	/^    int                 idx_y;$/;"	m	struct:_tm_input_queue	file:
idx	test/font.h	/^    int idx;$/;"	m	struct:fbcon_font_desc
input_queue	src/tmInput.c	/^    tm_input_queue_t  input_queue;$/;"	m	struct:_tm_input_dev	file:
internal_thread_func	src/qUtils.c	/^static void* internal_thread_func(void *userdata)$/;"	f	file:
ipc_data	test/tm_test.c	/^struct ipc_data{$/;"	s	file:
joined	include/qUtils.h	/^    q_bool joined;$/;"	m	struct:q_thread
last_vt	test/fbutils.c	/^static int con_fd, fb_fd, last_vt = -1;$/;"	v	file:
len_buf	include/qUtils.h	/^  int len_buf;$/;"	m	struct:q_queue
len	src/tmIpc.c	/^        int  len;$/;"	m	struct:_tm_ipc_data	file:
len	test/tm_test.c	/^        int  len;$/;"	m	struct:ipc_data	file:
len	test/tm_test.c	/^    char len;$/;"	m	struct:_tm_cmd_t	file:
line_addr	test/fbutils.c	/^static unsigned char **line_addr;$/;"	v	file:
line	test/fbutils.c	/^void line (int x1, int y1, int x2, int y2, unsigned colidx)$/;"	f
line	src/tmIpc.c	/^        char *line;$/;"	m	struct:_tm_ipc_data	file:
line	test/tm_test.c	/^        char *line;$/;"	m	struct:ipc_data	file:
link_num	include/tm.h	/^    int             link_num;$/;"	m	struct:_tm_panel_info
list_first_entry	include/qUtils.h	123;"	d
list_for_each_entry_reverse	include/qUtils.h	143;"	d
list_for_each_entry	include/qUtils.h	138;"	d
list_head_t	include/qUtils.h	/^typedef struct _list_head list_head_t;$/;"	t	typeref:struct:_list_head
list_next_entry_or_null	include/qUtils.h	129;"	d
list_next_entry	include/qUtils.h	126;"	d
list_prev_entry_or_null	include/qUtils.h	135;"	d
list_prev_entry	include/qUtils.h	132;"	d
long_opts	src/main.c	/^struct option long_opts[] = {$/;"	v	typeref:struct:option
long_opts	test/tm_test.c	/^struct option long_opts[] = {$/;"	v	typeref:struct:option
main	qsi_cal.c	/^int main()$/;"	f
main	src/main.c	/^int main(int argc, char* argv[])$/;"	f
main	test/tm_test.c	/^int main(int argc, const char *argv[])$/;"	f
max_act_num	src/tmInput.c	/^    uint8_t           max_act_num;$/;"	m	struct:_tm_input_dev	file:
max_x	include/tmMapping.h	/^    int16_t max_x;$/;"	m	struct:_tm_native_size_param
max_y	include/tmMapping.h	/^    int16_t max_y;$/;"	m	struct:_tm_native_size_param
maxfd	src/tmInput.c	/^    int               maxfd;$/;"	m	struct:_tm_input_dev	file:
msg	src/tmIpc.c	/^        unsigned char *msg;$/;"	m	struct:_tm_ipc_data	file:
msg	test/tm_test.c	/^        unsigned char *msg;$/;"	m	struct:ipc_data	file:
mt	src/tmInput.c	/^    tm_input_coord_t    mt[SLOT_NUM];$/;"	m	struct:_tm_input_queue	file:
multiptr	test/fbutils.c	/^union multiptr {$/;"	u	file:
mult	include/tmMapping.h	/^        int mult;$/;"	m	struct:_tm_calibrate::__anon3
mutex	include/qUtils.h	/^    pthread_mutex_t mutex;$/;"	m	struct:q_mutex
mutex	include/tm.h	/^    q_mutex*                mutex;$/;"	m	struct:_tm_ap_info
mutex	include/tm.h	/^    q_mutex*        mutex;$/;"	m	struct:_tm_panel_info
mutex	src/tm.c	/^    q_mutex*            mutex;$/;"	m	struct:_tm_info	file:
mutex	src/tmMapping.c	/^    q_mutex*        mutex;$/;"	m	struct:_tm_handler	file:
name	include/tm.h	/^        tm_ap_t             name;$/;"	m	union:_tm_ap_info::__anon1
name	include/tm.h	/^        tm_panel_t  name;$/;"	m	union:_tm_panel_info::__anon2
name	src/tmIpc.c	/^        char *name;$/;"	m	struct:_tm_ipc_data	file:
name	test/font.h	/^    char *name;$/;"	m	struct:fbcon_font_desc
name	test/tm_test.c	/^        char *name;$/;"	m	struct:ipc_data	file:
native_size_head	include/tmMapping.h	/^    list_head_t             native_size_head;$/;"	m	struct:_tm_config
native_size_head	src/tmMapping.c	/^    list_head_t     native_size_head;$/;"	m	struct:_tm_handler	file:
native_size_num	include/tmMapping.h	/^    uint8_t                 native_size_num;$/;"	m	struct:_tm_config
native_size	include/tm.h	/^    tm_native_size_param_t* native_size;$/;"	m	struct:_tm_ap_info
native_size	include/tm.h	/^    tm_native_size_param_t* native_size;$/;"	m	struct:_tm_panel_info
next	include/qUtils.h	/^    list_head_t *next,*prev;$/;"	m	struct:_list_head
next	include/tm.h	/^    tm_display_t*   next;$/;"	m	struct:_tm_display
node	include/tm.h	/^    list_head_t             node;$/;"	m	struct:_tm_ap_info
node	include/tm.h	/^    list_head_t     node;$/;"	m	struct:_tm_display
node	include/tm.h	/^    list_head_t     node;$/;"	m	struct:_tm_panel_info
node	include/tmMapping.h	/^    list_head_t         node;$/;"	m	struct:_tm_calibrate
node	include/tmMapping.h	/^    list_head_t node;$/;"	m	struct:_tm_native_size_param
node	src/tmInput.c	/^    list_head_t	      node;$/;"	m	struct:_tm_input_dev	file:
num	test/tm_test.c	/^    int   num;$/;"	m	struct:_evt_data_t	file:
num	test/tm_test.c	/^    int   num;$/;"	m	struct:_fb_data_t	file:
offset	include/tmMapping.h	/^        int offset;$/;"	m	struct:_tm_calibrate::__anon3
open_framebuffer	test/fbutils.c	/^int open_framebuffer(thread_data_t* data)$/;"	f
open_ipc	test/tm_test.c	/^int open_ipc()$/;"	f
open	src/tmInput.c	/^    volatile q_bool     open;$/;"	m	struct:_tm_input	file:
p16	test/fbutils.c	/^	unsigned short *p16;$/;"	m	union:multiptr	file:
p32	test/fbutils.c	/^	unsigned long *p32;$/;"	m	union:multiptr	file:
p8	test/fbutils.c	/^	unsigned char *p8;$/;"	m	union:multiptr	file:
palette	test/ts_test.c	/^static int palette [] =$/;"	v	file:
panel	src/tmInput.c	/^    tm_panel_info_t*  panel;$/;"	m	struct:_tm_input_dev	file:
panel	test/tm_test.c	/^    char panel;$/;"	m	struct:_cmd_append_t	file:
panel	test/tm_test.c	/^    char panel;$/;"	m	struct:_cmd_clear_t	file:
pan	test/tm_test.c	/^    char* pan;$/;"	m	struct:_fb_data_t	file:
perform_calibration	qsi_cal.c	/^int perform_calibration(calibration *cal) {$/;"	f
pixel	test/fbutils.c	/^void pixel (int x, int y, unsigned colidx)$/;"	f
p	src/tmInput.c	/^    int p;$/;"	m	struct:_tm_input_coord	file:
pnl_head	src/tm.c	/^    list_head_t       	pnl_head;$/;"	m	struct:_tm_info	file:
pnl_high	test/tm_test.c	/^    char pnl_high;$/;"	m	struct:_cmd_append_t	file:
pnl_start_pos_x	test/tm_test.c	/^    char pnl_start_pos_x;$/;"	m	struct:_cmd_append_t	file:
pnl_start_pos_y	test/tm_test.c	/^    char pnl_start_pos_y;$/;"	m	struct:_cmd_append_t	file:
pnl_width	test/tm_test.c	/^    char pnl_width;$/;"	m	struct:_cmd_append_t	file:
pref	test/font.h	/^    int pref;$/;"	m	struct:fbcon_font_desc
pressure	include/tmMapping.h	/^    }pressure;$/;"	m	struct:_tm_calibrate	typeref:struct:_tm_calibrate::__anon3
pressure	test/tslib.h	/^	unsigned int	pressure;$/;"	m	struct:ts_sample
prev	include/qUtils.h	/^    list_head_t *next,*prev;$/;"	m	struct:_list_head
ptr	include/qUtils.h	/^    q_atomic_ptr_t ptr;$/;"	m	struct:q_static_mutex
ptr	include/qUtils.h	/^    q_atomic_ptr_t ptr;$/;"	m	struct:q_static_semaphore
put_char	test/fbutils.c	/^void put_char(int x, int y, int c, int colidx)$/;"	f
put_cross	test/fbutils.c	/^void put_cross(int x, int y, unsigned colidx)$/;"	f
put_string_center	test/fbutils.c	/^void put_string_center(int x, int y, char *s, unsigned colidx)$/;"	f
put_string	test/fbutils.c	/^void put_string(int x, int y, char *s, unsigned colidx)$/;"	f
q_add_queue	src/qUtils.c	/^int q_add_queue(q_queue* q, void* item, q_bool expand)$/;"	f
q_assert	include/qUtils.h	52;"	d
q_assert	include/qUtils.h	61;"	d
q_atomic_add	include/qUtils.h	/^static inline int q_atomic_add( int i, q_atomic_t *a) {$/;"	f
q_atomic_add	include/qUtils.h	/^static inline void q_atomic_add(int i, q_atomic_t *v)$/;"	f
q_atomic_dec	include/qUtils.h	/^static inline int q_atomic_dec(q_atomic_t *a) {$/;"	f
q_atomic_dec	include/qUtils.h	/^static inline void q_atomic_dec(q_atomic_t *v)$/;"	f
q_atomic_inc	include/qUtils.h	/^static inline int q_atomic_inc(q_atomic_t *a) {$/;"	f
q_atomic_inc	include/qUtils.h	/^static inline void q_atomic_inc(q_atomic_t *v)$/;"	f
q_atomic_ptr_load	include/qUtils.h	/^static inline void* q_atomic_ptr_load(const q_atomic_ptr_t *a) {$/;"	f
q_atomic_ptr_store	include/qUtils.h	/^static inline void q_atomic_ptr_store(q_atomic_ptr_t *a, void *p) {$/;"	f
q_atomic_ptr_t	include/qUtils.h	/^} q_atomic_ptr_t;$/;"	t	typeref:struct:q_atomic_ptr
q_atomic_ptr	include/qUtils.h	/^typedef struct q_atomic_ptr {$/;"	s
q_atomic_read	include/qUtils.h	/^static inline int q_atomic_read(const q_atomic_t *a) {$/;"	f
q_atomic_read	include/qUtils.h	/^static inline int q_atomic_read(const q_atomic_t *v)$/;"	f
q_atomic_set	include/qUtils.h	/^static inline void q_atomic_set(q_atomic_t *a, int i) {$/;"	f
q_atomic_set	include/qUtils.h	/^static inline void q_atomic_set(q_atomic_t *v, int i)$/;"	f
q_atomic_sub	include/qUtils.h	/^static inline int q_atomic_sub( int i, q_atomic_t *a) {$/;"	f
q_atomic_sub	include/qUtils.h	/^static inline void q_atomic_sub(int i, q_atomic_t *v)$/;"	f
q_atomic_t	include/qUtils.h	/^} q_atomic_t;$/;"	t	typeref:struct:q_atomic
q_atomic	include/qUtils.h	/^typedef struct q_atomic {$/;"	s
q_bool	include/qUtils.h	/^typedef int q_bool;$/;"	t
q_calloc	src/qUtils.c	/^void* q_calloc(size_t size)$/;"	f
q_close	src/qUtils.c	/^int q_close(int fd)$/;"	f
q_cond_free	src/qUtils.c	/^void q_cond_free(q_cond *c)$/;"	f
q_cond_new	src/qUtils.c	/^q_cond *q_cond_new()$/;"	f
q_cond_signal	src/qUtils.c	/^void q_cond_signal(q_cond *c, int broadcast)$/;"	f
q_cond_wait	src/qUtils.c	/^int q_cond_wait(q_cond *c, q_mutex *m)$/;"	f
q_cond	include/qUtils.h	/^typedef struct q_cond {$/;"	s
q_cond	include/qUtils.h	/^}q_cond;$/;"	t	typeref:struct:q_cond
q_container_of	include/qUtils.h	117;"	d
q_create_queue	src/qUtils.c	/^q_queue* q_create_queue(int size)$/;"	f
q_dbg	include/qUtils.h	64;"	d
q_destroy_queue	src/qUtils.c	/^void q_destroy_queue(q_queue* q)$/;"	f
q_expand_queue	src/qUtils.c	/^void q_expand_queue(q_queue* q)$/;"	f
q_false	include/qUtils.h	34;"	d
q_free	src/qUtils.c	/^void q_free(void *p)$/;"	f
q_get_queue	src/qUtils.c	/^int q_get_queue(q_queue* q, char* buf, size_t len)$/;"	f
q_init_head	src/qUtils.c	/^void q_init_head(list_head_t* head)$/;"	f
q_isempty_queue	include/qUtils.h	/^static inline q_bool q_isempty_queue(q_queue* q)$/;"	f
q_isfull_queue	include/qUtils.h	/^static inline q_bool q_isfull_queue(q_queue* q)$/;"	f
q_list_add_tail	src/qUtils.c	/^void q_list_add_tail(list_head_t *head, list_head_t* _new)$/;"	f
q_list_add	src/qUtils.c	/^void q_list_add(list_head_t *head, list_head_t* _new)$/;"	f
q_list_del	src/qUtils.c	/^void q_list_del(list_head_t *entry)$/;"	f
q_loop_read	src/qUtils.c	/^ssize_t q_loop_read(int fd, void *data, size_t size)$/;"	f
q_loop_write	src/qUtils.c	/^ssize_t q_loop_write(int fd, const void *data, size_t size, int *type)$/;"	f
q_malloc	src/qUtils.c	/^void* q_malloc(size_t size)$/;"	f
q_memory_barrier	include/qUtils.h	/^static inline void q_memory_barrier(void) {$/;"	f
q_mutex_free	src/qUtils.c	/^void q_mutex_free(q_mutex *m)$/;"	f
q_mutex_lock	src/qUtils.c	/^void q_mutex_lock(q_mutex *m)$/;"	f
q_mutex_new	src/qUtils.c	/^q_mutex* q_mutex_new(q_bool recursive, q_bool inherit_priority)$/;"	f
q_mutex_try_lock	src/qUtils.c	/^q_bool q_mutex_try_lock(q_mutex *m)$/;"	f
q_mutex_unlock	src/qUtils.c	/^void q_mutex_unlock(q_mutex *m)$/;"	f
q_mutex	include/qUtils.h	/^typedef struct q_mutex {$/;"	s
q_mutex	include/qUtils.h	/^}q_mutex;$/;"	t	typeref:struct:q_mutex
q_nothing	include/qUtils.h	49;"	d
q_offsetof	include/qUtils.h	115;"	d
q_peek_queue	src/qUtils.c	/^int q_peek_queue(q_queue* q, char* item, int idx)$/;"	f
q_pop_queue	src/qUtils.c	/^int q_pop_queue(q_queue* q, char* item)$/;"	f
q_queue	include/qUtils.h	/^typedef struct q_queue {$/;"	s
q_queue	include/qUtils.h	/^}q_queue;$/;"	t	typeref:struct:q_queue
q_read	src/qUtils.c	/^ssize_t q_read(int fd, void *buf, size_t count)$/;"	f
q_semaphore_free	src/qUtils.c	/^void q_semaphore_free(q_semaphore *s)$/;"	f
q_semaphore_new	src/qUtils.c	/^q_semaphore* 	q_semaphore_new(unsigned value)$/;"	f
q_semaphore_post	src/qUtils.c	/^void q_semaphore_post(q_semaphore *s)$/;"	f
q_semaphore_wait	src/qUtils.c	/^void q_semaphore_wait(q_semaphore *s)$/;"	f
q_semaphore	include/qUtils.h	/^typedef struct q_semaphore {$/;"	s
q_semaphore	include/qUtils.h	/^}q_semaphore;$/;"	t	typeref:struct:q_semaphore
q_set_queue	src/qUtils.c	/^int q_set_queue(q_queue* q, void* buf, size_t len, q_bool expand)$/;"	f
q_show_queue	src/qUtils.c	/^void q_show_queue(q_queue* q)$/;"	f
q_size_queue	src/qUtils.c	/^size_t q_size_queue(q_queue* q)$/;"	f
q_static_mutex	include/qUtils.h	/^typedef struct q_static_mutex {$/;"	s
q_static_mutex	include/qUtils.h	/^} q_static_mutex;$/;"	t	typeref:struct:q_static_mutex
q_static_semaphore	include/qUtils.h	/^typedef struct q_static_semaphore {$/;"	s
q_static_semaphore	include/qUtils.h	/^} q_static_semaphore;$/;"	t	typeref:struct:q_static_semaphore
q_strdup	src/qUtils.c	/^char* q_strdup(const char *s)$/;"	f
q_strlcpy	src/qUtils.c	/^char *q_strlcpy(char *b, const char *s, size_t l)$/;"	f
q_strnull	include/qUtils.h	/^static inline const char *q_strnull(const char *x)$/;"	f
q_thread_delet	src/qUtils.c	/^void q_thread_delet(q_thread *t)$/;"	f
q_thread_free	src/qUtils.c	/^void q_thread_free(q_thread *t)$/;"	f
q_thread_func_t	include/qUtils.h	/^typedef void (*q_thread_func_t) (void *userdata);$/;"	t
q_thread_get_data	src/qUtils.c	/^void* q_thread_get_data(q_thread *t)$/;"	f
q_thread_join	src/qUtils.c	/^int q_thread_join(q_thread *t)$/;"	f
q_thread_new	src/qUtils.c	/^q_thread* q_thread_new(q_thread_func_t thread_func, void *userdata)$/;"	f
q_thread	include/qUtils.h	/^typedef struct q_thread {$/;"	s
q_thread	include/qUtils.h	/^}q_thread;$/;"	t	typeref:struct:q_thread
q_true	include/qUtils.h	35;"	d
q_write	src/qUtils.c	/^ssize_t q_write(int fd, const void *buf, size_t count, int *type)$/;"	f
queue	include/tm.h	/^    q_queue*        queue;$/;"	m	struct:_tm_panel_info
queue	src/tmInput.c	/^    q_queue*          queue;$/;"	m	struct:_tm_input_dev	file:
rear	include/qUtils.h	/^  int rear;$/;"	m	struct:q_queue
rect	test/fbutils.c	/^void rect (int x1, int y1, int x2, int y2, unsigned colidx)$/;"	f
recv_event	test/tm_test.c	/^void recv_event(const char *from, unsigned int len, unsigned char *msg)$/;"	f
recv_func	src/tmIpc.c	/^        QSI_RECV_EVENT recv_func;$/;"	m	struct:_tm_ipc_data	file:
recv_func	test/tm_test.c	/^        QSI_RECV_EVENT recv_func;$/;"	m	struct:ipc_data	file:
refresh_screen	test/ts_test.c	/^static void refresh_screen ()$/;"	f	file:
running	include/qUtils.h	/^    q_atomic_t running;$/;"	m	struct:q_thread
scaling	include/tmMapping.h	/^    int                 scaling;$/;"	m	struct:_tm_calibrate
sem	include/qUtils.h	/^    sem_t sem;$/;"	m	struct:q_semaphore
send_ipc	test/tm_test.c	/^void send_ipc(tm_cmd_t* cmd)$/;"	f
server	src/tmIpc.c	/^        QSI_Channel *server;$/;"	m	struct:_tm_ipc_data	file:
server	test/tm_test.c	/^        QSI_Channel *server;$/;"	m	struct:ipc_data	file:
set_abs_status	include/tmInput.h	61;"	d
set_calibration	qsi_cal.c	/^void set_calibration(calibration* cal, int i, int xfb, int yfb, int x, int y)$/;"	f
setcolor	test/fbutils.c	/^void setcolor(unsigned colidx, unsigned value, thread_data_t* data)$/;"	f
slot	src/tmInput.c	/^    int                 slot;$/;"	m	struct:_tm_input_queue	file:
st_x	include/tmMapping.h	/^    int st_x;$/;"	m	struct:_tm_fb_param
st_y	include/tmMapping.h	/^    int st_y;$/;"	m	struct:_tm_fb_param
status_info	src/main.c	/^struct tm_status_info status_info[] = {$/;"	v	typeref:struct:tm_status_info
status	src/main.c	/^    tm_status_t status;$/;"	m	struct:tm_status_info	file:
status	src/tm.c	/^    tm_status_t*        status;$/;"	m	struct:_tm_info	file:
status	src/tmInput.c	/^    volatile tm_input_status_t status;$/;"	m	struct:_tm_input_dev	file:
status	src/tmIpc.c	/^        QSI_PROTOCOL_ST status;$/;"	m	struct:_tm_ipc_data	file:
status	test/tm_test.c	/^        QSI_PROTOCOL_ST status;$/;"	m	struct:ipc_data	file:
str	src/main.c	/^    const char* str;$/;"	m	struct:tm_status_info	file:
suspend	src/tmInput.c	/^    volatile q_bool     suspend;$/;"	m	struct:_tm_input	file:
swap	include/tmMapping.h	/^    char swap;$/;"	m	struct:_tm_fb_param
target	src/tmIpc.c	/^        char *target;$/;"	m	struct:_tm_ipc_data	file:
target	test/tm_test.c	/^        char *target;$/;"	m	struct:ipc_data	file:
testBit	include/tmInput.h	/^static inline int testBit(long bit, const long *array)$/;"	f
test_thread_func	test/tm_test.c	/^void test_thread_func(void* data)$/;"	f
text	test/ts_test.c	/^	char *text;$/;"	m	struct:ts_button	file:
thread_data_t	test/tm_test.h	/^} thread_data_t;$/;"	t	typeref:struct:_thread_data_t
thread_func	include/qUtils.h	/^    q_thread_func_t thread_func;$/;"	m	struct:q_thread
thread	src/tmInput.c	/^    q_thread*         thread;$/;"	m	struct:_tm_input_dev	file:
tm_ap_head	src/tmInput.c	/^    list_head_t*        tm_ap_head;$/;"	m	struct:_tm_input	file:
tm_ap_info_t	include/tm.h	/^typedef struct _tm_ap_info      tm_ap_info_t;$/;"	t	typeref:struct:_tm_ap_info
tm_ap_t	include/tm.h	/^typedef enum _tm_ap         tm_ap_t;$/;"	t	typeref:enum:_tm_ap
tm_bind_status	src/tm.c	/^void tm_bind_status(tm_status_t* status)$/;"	f
tm_calibrate_t	include/tmMapping.h	/^typedef struct _tm_calibrate            tm_calibrate_t;$/;"	t	typeref:struct:_tm_calibrate
tm_clear_map	src/tm.c	/^void tm_clear_map(unsigned int len, unsigned char *msg)$/;"	f
tm_close_ipc	src/tmIpc.c	/^void tm_close_ipc()$/;"	f
tm_close_ipc	test/tm_test.c	/^void tm_close_ipc()$/;"	f
tm_cmd_t	test/tm_test.c	/^} tm_cmd_t;$/;"	t	typeref:struct:_tm_cmd_t	file:
tm_config_t	include/tmMapping.h	/^typedef struct _tm_config               tm_config_t;$/;"	t	typeref:struct:_tm_config
tm_daemonise	src/main.c	/^void tm_daemonise()$/;"	f
tm_dbg_print_conf	src/tm.c	/^void tm_dbg_print_conf()$/;"	f
tm_deinit	src/tm.c	/^void tm_deinit()$/;"	f
tm_display_t	include/tm.h	/^typedef struct _tm_display      tm_display_t;$/;"	t	typeref:struct:_tm_display
tm_err_str	include/tmError.h	/^static inline const char* tm_err_str(tm_errno_t no)$/;"	f
tm_errno_t	include/tmError.h	/^typedef enum _tm_errno tm_errno_t;$/;"	t	typeref:enum:_tm_errno
tm_event_type_t	include/tmMapping.h	/^typedef enum _tm_event_type             tm_event_type_t;$/;"	t	typeref:enum:_tm_event_type
tm_fb_param_t	include/tmMapping.h	/^typedef struct _tm_fb_param             tm_fb_param_t;$/;"	t	typeref:struct:_tm_fb_param
tm_fb_t	include/tm.h	/^typedef enum _tm_fb         tm_fb_t;$/;"	t	typeref:enum:_tm_fb
tm_fill_up_fb_conf	src/tm.c	/^void tm_fill_up_fb_conf(tm_fb_param_t* fb, tm_native_size_param_t* native)$/;"	f
tm_handler_t	src/tmMapping.c	/^}tm_handler_t;$/;"	t	typeref:struct:_tm_handler	file:
tm_handler	src/tmMapping.c	/^static tm_handler_t tm_handler;$/;"	v	file:
tm_info_t	src/tm.c	/^}tm_info_t;$/;"	t	typeref:struct:_tm_info	file:
tm_init	src/tm.c	/^tm_errno_t tm_init()$/;"	f
tm_input_add_active_ap	src/tmInput.c	/^void tm_input_add_active_ap(tm_input_dev_t* dev, tm_ap_info_t* ap)$/;"	f
tm_input_add_time	include/tmInput.h	/^static inline void tm_input_add_time(tm_input_timeval_t *time, int ms)$/;"	f
tm_input_clean_stdin	src/tmInput.c	/^void tm_input_clean_stdin()$/;"	f
tm_input_close_events	src/tmInput.c	/^void tm_input_close_events()$/;"	f
tm_input_coord_t	src/tmInput.c	/^}tm_input_coord_t;$/;"	t	typeref:struct:_tm_input_coord	file:
tm_input_deinit	src/tmInput.c	/^void tm_input_deinit()$/;"	f
tm_input_del_active_ap	src/tmInput.c	/^void tm_input_del_active_ap(tm_input_dev_t* dev, tm_ap_info_t* ap)$/;"	f
tm_input_dev_t	src/tmInput.c	/^}tm_input_dev_t;$/;"	t	typeref:struct:_tm_input_dev	file:
tm_input_event_t	include/tmInput.h	/^typedef struct input_event tm_input_event_t;$/;"	t	typeref:struct:input_event
tm_input_evt_str	src/tmInput.c	/^const char* tm_input_evt_str(int type,int code)$/;"	f
tm_input_get_time	include/tmInput.h	/^static inline void tm_input_get_time(tm_input_timeval_t *time)$/;"	f
tm_input_init_events	src/tmInput.c	/^tm_errno_t tm_input_init_events()$/;"	f
tm_input_init	src/tmInput.c	/^tm_errno_t tm_input_init(list_head_t* ap_head, list_head_t* pnl_head)$/;"	f
tm_input_parse_multi_touch	src/tmInput.c	/^void tm_input_parse_multi_touch(tm_input_dev_t* dev, tm_input_event_t* evt)$/;"	f
tm_input_parse_single_touch	src/tmInput.c	/^void tm_input_parse_single_touch(tm_input_dev_t* dev, tm_input_event_t* evt)$/;"	f
tm_input_queue_t	src/tmInput.c	/^}tm_input_queue_t;$/;"	t	typeref:struct:_tm_input_queue	file:
tm_input_remove_dev	src/tmInput.c	/^void tm_input_remove_dev()$/;"	f
tm_input_reset_select_time	src/tmInput.c	/^void tm_input_reset_select_time(tm_input_dev_t* dev, struct timeval* tv)$/;"	f
tm_input_send_event	src/tmInput.c	/^void tm_input_send_event(tm_ap_info_t* ap, tm_input_event_t* evt, uint16_t type, uint16_t code, int val)$/;"	f
tm_input_set_type	src/tmInput.c	/^void tm_input_set_type(tm_input_dev_t* dev)$/;"	f
tm_input_status_t	include/tmInput.h	/^typedef enum _tm_input_status tm_input_status_t;$/;"	t	typeref:enum:_tm_input_status
tm_input_sync_multi_touch	src/tmInput.c	/^void tm_input_sync_multi_touch(tm_input_dev_t* dev)$/;"	f
tm_input_sync_single_touch	src/tmInput.c	/^void tm_input_sync_single_touch(tm_input_dev_t* dev)$/;"	f
tm_input_thread_func	src/tmInput.c	/^void tm_input_thread_func(void *data)$/;"	f
tm_input_timeval_t	include/tmInput.h	/^typedef struct timeval tm_input_timeval_t;$/;"	t	typeref:struct:timeval
tm_input_t	src/tmInput.c	/^}tm_input_t;$/;"	t	typeref:struct:_tm_input	file:
tm_input_type_t	include/tmInput.h	/^typedef enum _tm_input_type tm_input_type_t;$/;"	t	typeref:enum:_tm_input_type
tm_input	src/tmInput.c	/^static tm_input_t tm_input;$/;"	v	file:
tm_ipc_data_t	src/tmIpc.c	/^}tm_ipc_data_t;$/;"	t	typeref:struct:_tm_ipc_data	file:
tm_mapping_ap_bind_conf	src/tmMapping.c	/^tm_errno_t tm_mapping_ap_bind_conf(tm_ap_info_t* ap)$/;"	f
tm_mapping_ap_conf	src/tmMapping.c	/^tm_errno_t tm_mapping_ap_conf(list_head_t* ap_head)$/;"	f
tm_mapping_calibrate_conf	src/tmMapping.c	/^tm_errno_t tm_mapping_calibrate_conf()$/;"	f
tm_mapping_create_handler	src/tmMapping.c	/^tm_errno_t  tm_mapping_create_handler(list_head_t* ap_head, list_head_t* pnl_head)$/;"	f
tm_mapping_destroy_handler	src/tmMapping.c	/^void tm_mapping_destroy_handler(list_head_t* ap_head, list_head_t* pnl_head)$/;"	f
tm_mapping_get_ap_info	src/tm.c	/^tm_ap_info_t* tm_mapping_get_ap_info(int id)$/;"	f
tm_mapping_get_calibrate_param	src/tmMapping.c	/^tm_calibrate_t* tm_mapping_get_calibrate_param(int id)$/;"	f
tm_mapping_get_default_ap	src/tm.c	/^tm_ap_info_t* tm_mapping_get_default_ap(int panel_id)$/;"	f
tm_mapping_get_native_size_param	src/tmMapping.c	/^tm_native_size_param_t* tm_mapping_get_native_size_param(int id)$/;"	f
tm_mapping_get_panel_info	src/tm.c	/^tm_panel_info_t* tm_mapping_get_panel_info(int id)$/;"	f
tm_mapping_matrix_mult	src/tmMapping.c	/^void tm_mapping_matrix_mult(tm_trans_matrix_t *matrix, int* vector)$/;"	f
tm_mapping_native_size_conf	src/tmMapping.c	/^tm_errno_t tm_mapping_native_size_conf()$/;"	f
tm_mapping_pnl_bind_conf	src/tmMapping.c	/^tm_errno_t tm_mapping_pnl_bind_conf(tm_panel_info_t* panel)$/;"	f
tm_mapping_pnl_conf	src/tmMapping.c	/^tm_errno_t tm_mapping_pnl_conf(list_head_t* pnl_head)$/;"	f
tm_mapping_point	src/tmMapping.c	/^void tm_mapping_point(tm_display_t* dis, int src_x, int src_y, int* dest_x, int* dest_y)$/;"	f
tm_mapping_print_ap_info	src/tmMapping.c	/^void tm_mapping_print_ap_info(list_head_t* ap_head)$/;"	f
tm_mapping_print_cal_info	src/tmMapping.c	/^void tm_mapping_print_cal_info()$/;"	f
tm_mapping_print_conf	src/tmMapping.c	/^void tm_mapping_print_conf(list_head_t* ap_head, list_head_t* pnl_head)$/;"	f
tm_mapping_print_panel_info	src/tmMapping.c	/^void tm_mapping_print_panel_info(list_head_t* pnl_head)$/;"	f
tm_mapping_print_size_info	src/tmMapping.c	/^void tm_mapping_print_size_info()$/;"	f
tm_mapping_remove_conf	src/tmMapping.c	/^void tm_mapping_remove_conf(list_head_t* ap_head, list_head_t* pnl_head)$/;"	f
tm_mapping_transfer	src/tmMapping.c	/^tm_ap_info_t* tm_mapping_transfer(int *x, int *y, tm_panel_info_t* panel)$/;"	f
tm_mapping_update_conf	src/tmMapping.c	/^tm_errno_t tm_mapping_update_conf(list_head_t* ap_head, list_head_t* pnl_head)$/;"	f
tm_match_ap	src/tm.c	/^tm_ap_info_t* tm_match_ap(int x, int y, tm_panel_info_t* panel)$/;"	f
tm_match_display	src/tm.c	/^tm_display_t* tm_match_display(int x, int y, tm_panel_info_t* panel)$/;"	f
tm_native_size_param_t	include/tmMapping.h	/^typedef struct _tm_native_size_param    tm_native_size_param_t;$/;"	t	typeref:struct:_tm_native_size_param
tm_op_event_t	include/tmMapping.h	/^typedef enum _tm_op_event               tm_op_event_t;$/;"	t	typeref:enum:_tm_op_event
tm_open_ipc	src/tmIpc.c	/^int tm_open_ipc()$/;"	f
tm_panel_info_t	include/tm.h	/^typedef struct _tm_panel_info   tm_panel_info_t;$/;"	t	typeref:struct:_tm_panel_info
tm_panel_t	include/tm.h	/^typedef enum _tm_panel      tm_panel_t;$/;"	t	typeref:enum:_tm_panel
tm_pnl_head	src/tmInput.c	/^    list_head_t*        tm_pnl_head;$/;"	m	struct:_tm_input	file:
tm_point_is_in_range	include/tm.h	29;"	d
tm_recv_event	src/tmIpc.c	/^void tm_recv_event(const char *from, unsigned int len, unsigned char *msg)$/;"	f
tm_remove_display_conf	src/tm.c	/^void tm_remove_display_conf()$/;"	f
tm_set_default_display	src/tm.c	/^void tm_set_default_display()$/;"	f
tm_set_fb_param	src/tm.c	/^tm_errno_t tm_set_fb_param(tm_fb_param_t* fb, int start_x, int start_y, int per_width, int per_high)$/;"	f
tm_set_map	src/tm.c	/^void tm_set_map(unsigned int len, unsigned char *msg)$/;"	f
tm_set_status	src/tm.c	/^void tm_set_status(tm_status_t status)$/;"	f
tm_shutdown	src/main.c	/^void tm_shutdown(int signum)$/;"	f
tm_status_info	src/main.c	/^struct tm_status_info{$/;"	s	file:
tm_status_t	include/tm.h	/^typedef enum _tm_status     tm_status_t;$/;"	t	typeref:enum:_tm_status
tm_switch_main_status	src/main.c	/^void tm_switch_main_status(tm_status_t status)$/;"	f
tm_trans_matrix_t	include/tmMapping.h	/^typedef struct _tm_trans_matrix         tm_trans_matrix_t;$/;"	t	typeref:struct:_tm_trans_matrix
tm_transfer	src/tm.c	/^tm_ap_info_t* tm_transfer(int *x, int *y, tm_panel_info_t* panel)$/;"	f
tm_usage	src/main.c	/^void tm_usage(char* arg)$/;"	f
tm_version	src/main.c	/^void tm_version()$/;"	f
tm	src/tm.c	/^static tm_info_t tm;$/;"	v	file:
to	include/tm.h	/^    tm_fb_param_t   to;$/;"	m	struct:_tm_display
touch_type	include/tm.h	/^    tm_input_type_t         touch_type;$/;"	m	struct:_tm_ap_info
trans_matrix	include/tmMapping.h	/^    tm_trans_matrix_t   trans_matrix;$/;"	m	struct:_tm_calibrate
ts_button	test/ts_test.c	/^struct ts_button {$/;"	s	file:
ts_sample	test/tslib.h	/^struct ts_sample {$/;"	s
ts_test	test/ts_test.c	/^int ts_test(thread_data_t* data)$/;"	f
tv	test/tslib.h	/^	struct timeval	tv;$/;"	m	struct:ts_sample	typeref:struct:ts_sample::timeval
type	src/tmInput.c	/^    tm_input_type_t   type;$/;"	m	struct:_tm_input_dev	file:
userdata	include/qUtils.h	/^    void *userdata;$/;"	m	struct:q_thread
value	include/qUtils.h	/^    volatile int value;$/;"	m	struct:q_atomic
value	include/qUtils.h	/^    volatile unsigned long value;$/;"	m	struct:q_atomic_ptr
var	test/fbutils.c	/^static struct fb_var_screeninfo var;$/;"	v	typeref:struct:fb_var_screeninfo	file:
vertical	include/tmMapping.h	/^    char vertical;$/;"	m	struct:_tm_fb_param
width	test/font.h	/^    int width, height;$/;"	m	struct:fbcon_font_desc
w	include/tmMapping.h	/^    int w;$/;"	m	struct:_tm_fb_param
w	test/ts_test.c	/^	int x, y, w, h;$/;"	m	struct:ts_button	file:
xfb	qsi_cal.c	/^	int x[5], xfb[5];$/;"	m	struct:__anon4	file:
x	qsi_cal.c	/^	int x[5], xfb[5];$/;"	m	struct:__anon4	file:
x	src/tmInput.c	/^    int x;$/;"	m	struct:_tm_input_coord	file:
x	test/ts_test.c	/^	int x, y, w, h;$/;"	m	struct:ts_button	file:
x	test/tslib.h	/^	int		x;$/;"	m	struct:ts_sample
xres	test/fbutils.c	/^__u32 xres, yres;$/;"	v
yfb	qsi_cal.c	/^	int y[5], yfb[5];$/;"	m	struct:__anon4	file:
y	qsi_cal.c	/^	int y[5], yfb[5];$/;"	m	struct:__anon4	file:
y	src/tmInput.c	/^    int y;$/;"	m	struct:_tm_input_coord	file:
y	test/ts_test.c	/^	int x, y, w, h;$/;"	m	struct:ts_button	file:
y	test/tslib.h	/^	int		y;$/;"	m	struct:ts_sample
yres	test/fbutils.c	/^__u32 xres, yres;$/;"	v
